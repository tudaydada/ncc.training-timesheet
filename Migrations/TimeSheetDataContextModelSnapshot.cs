// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeSheet.Data;

#nullable disable

namespace TimeSheet.Migrations
{
    [DbContext(typeof(TimeSheetDataContext))]
    partial class TimeSheetDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TimeSheet.Model.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AfternoonEndAt")
                        .HasColumnType("float");

                    b.Property<double>("AfternoonStartAt")
                        .HasColumnType("float");

                    b.Property<double>("AfternoonWorking")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MorningEndAt")
                        .HasColumnType("float");

                    b.Property<double>("MorningStartAt")
                        .HasColumnType("float");

                    b.Property<double>("MorningWorking")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            Code = "DN",
                            Color = "Red",
                            DisplayName = "Đà Nẵng",
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Name = "Da Nang"
                        },
                        new
                        {
                            Id = 2,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            Code = "SG",
                            Color = "Blue",
                            DisplayName = "Sài Gòn",
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Name = "Sai Gon"
                        },
                        new
                        {
                            Id = 3,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            Code = "HN",
                            Color = "Green",
                            DisplayName = "Hà Nội",
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Name = "Ha Noi"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Address 1",
                            Code = "C01",
                            Name = "Client 01"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Address 2",
                            Code = "C02",
                            Name = "Client 02"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Address 3",
                            Code = "C03",
                            Name = "Client 03"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Address 4",
                            Code = "C04",
                            Name = "Client 04"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Address 5",
                            Code = "C05",
                            Name = "Client 05"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Address 6",
                            Code = "C06",
                            Name = "Client 06"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Address 7",
                            Code = "C07",
                            Name = "Client 07"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Address 8",
                            Code = "C08",
                            Name = "Client 08"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Address 9",
                            Code = "C09",
                            Name = "Client 09"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Address 10",
                            Code = "C10",
                            Name = "Client 10"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ProjectTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProjectStatusId");

                    b.HasIndex("ProjectTypeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Code = "P1",
                            EndAt = new DateTime(2023, 4, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4103),
                            Name = "Project 1",
                            Note = "Note project 1",
                            ProjectStatusId = 1,
                            ProjectTypeId = 1,
                            StartAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4093)
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            Code = "P2",
                            EndAt = new DateTime(2023, 1, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4109),
                            Name = "Project 2",
                            Note = "Note project 2",
                            ProjectStatusId = 2,
                            ProjectTypeId = 2,
                            StartAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4109)
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 3,
                            Code = "P3",
                            EndAt = new DateTime(2023, 7, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4112),
                            Name = "Project 3",
                            Note = "Note project 3",
                            ProjectStatusId = 1,
                            ProjectTypeId = 3,
                            StartAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4112)
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.ProjectMember", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserStatusId");

                    b.ToTable("ProjectMembers");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            UserId = 3,
                            RoleId = 2,
                            UserStatusId = 1
                        },
                        new
                        {
                            ProjectId = 1,
                            UserId = 4,
                            RoleId = 3,
                            UserStatusId = 1
                        },
                        new
                        {
                            ProjectId = 1,
                            UserId = 1,
                            RoleId = 1,
                            UserStatusId = 2
                        },
                        new
                        {
                            ProjectId = 2,
                            UserId = 3,
                            RoleId = 3,
                            UserStatusId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            UserId = 4,
                            RoleId = 2,
                            UserStatusId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            UserId = 5,
                            RoleId = 2,
                            UserStatusId = 2
                        },
                        new
                        {
                            ProjectId = 2,
                            UserId = 6,
                            RoleId = 1,
                            UserStatusId = 1
                        },
                        new
                        {
                            ProjectId = 3,
                            UserId = 3,
                            RoleId = 3,
                            UserStatusId = 1
                        },
                        new
                        {
                            ProjectId = 3,
                            UserId = 4,
                            RoleId = 2,
                            UserStatusId = 2
                        },
                        new
                        {
                            ProjectId = 3,
                            UserId = 5,
                            RoleId = 2,
                            UserStatusId = 1
                        },
                        new
                        {
                            ProjectId = 3,
                            UserId = 6,
                            RoleId = 1,
                            UserStatusId = 1
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Deactive"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.ProjectTask", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            TaskId = 1
                        },
                        new
                        {
                            ProjectId = 1,
                            TaskId = 2
                        },
                        new
                        {
                            ProjectId = 1,
                            TaskId = 3
                        },
                        new
                        {
                            ProjectId = 2,
                            TaskId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            TaskId = 3
                        },
                        new
                        {
                            ProjectId = 2,
                            TaskId = 6
                        },
                        new
                        {
                            ProjectId = 3,
                            TaskId = 5
                        },
                        new
                        {
                            ProjectId = 3,
                            TaskId = 8
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.ProjectType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Time & Materials"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Fixed Fee"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Non-Billable"
                        },
                        new
                        {
                            Id = 4,
                            Name = "OCD"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Product"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Training"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Normalized")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayName = "Quản trị viên",
                            Name = "Admin",
                            Normalized = "admin"
                        },
                        new
                        {
                            Id = 2,
                            DisplayName = "Nhân viên",
                            Name = "Staff",
                            Normalized = "staff"
                        },
                        new
                        {
                            Id = 3,
                            DisplayName = "Quản lý dự án",
                            Name = "Project Manager",
                            Normalized = "pm"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.Tardiness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("CheckIn")
                        .HasColumnType("float");

                    b.Property<double>("CheckOut")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EditorId")
                        .HasColumnType("int");

                    b.Property<string>("NoteReply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RegistrationEnd")
                        .HasColumnType("float");

                    b.Property<double>("RegistrationStart")
                        .HasColumnType("float");

                    b.Property<int>("TardinessStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TardinessStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Tardinesses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckIn = 8.4000000000000004,
                            CheckOut = 17.399999999999999,
                            CreateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5811),
                            NoteReply = "",
                            RegistrationEnd = 17.300000000000001,
                            RegistrationStart = 8.3000000000000007,
                            TardinessStatusId = 1,
                            UserId = 1,
                            UserNote = "Work on task 1"
                        },
                        new
                        {
                            Id = 2,
                            CheckIn = 8.1999999999999993,
                            CheckOut = 17.399999999999999,
                            CreateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5816),
                            EditorId = 3,
                            NoteReply = "Confirm",
                            RegistrationEnd = 17.300000000000001,
                            RegistrationStart = 8.3000000000000007,
                            TardinessStatusId = 2,
                            UserId = 2,
                            UserNote = "Work on task 2"
                        },
                        new
                        {
                            Id = 3,
                            CheckIn = 8.3000000000000007,
                            CheckOut = 17.300000000000001,
                            CreateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5818),
                            NoteReply = "",
                            RegistrationEnd = 17.300000000000001,
                            RegistrationStart = 8.3000000000000007,
                            TardinessStatusId = 1,
                            UserId = 4,
                            UserNote = "Work on task 3"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.TardinessStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TardinessStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "TardinessStatus 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "TardinessStatus 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "TardinessStatus 3"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TaskTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeleted = false,
                            Name = "Task 1",
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            IsDeleted = false,
                            Name = "Task 2",
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            IsDeleted = false,
                            Name = "Task 3",
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDeleted = false,
                            Name = "Task 4",
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 5,
                            IsDeleted = false,
                            Name = "Task 5",
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            IsDeleted = false,
                            Name = "Task 6",
                            TaskTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            IsDeleted = false,
                            Name = "Task 7",
                            TaskTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            IsDeleted = false,
                            Name = "Task 8",
                            TaskTypeId = 2
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.TaskType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Common"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Orther"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.TimeSheetLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<int>("TimeSheetLogTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("WorkingTime")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TimeSheetLogTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("TimeSheetLog");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5754),
                            Note = "Note project1_task1",
                            ProjectId = 1,
                            TaskId = 1,
                            TimeSheetLogTypeId = 1,
                            UpdateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5756),
                            UserId = 1,
                            WorkingTime = 5.0
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5757),
                            Note = "Note project2_task2",
                            ProjectId = 2,
                            TaskId = 2,
                            TimeSheetLogTypeId = 2,
                            UpdateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5758),
                            UserId = 2,
                            WorkingTime = 6.0
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5759),
                            Note = "Note project3_task3",
                            ProjectId = 3,
                            TaskId = 3,
                            TimeSheetLogTypeId = 1,
                            UpdateAt = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(5759),
                            UserId = 3,
                            WorkingTime = 7.0
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.TimeSheetLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeSheetLogType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Normal working hours"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Overtime"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("AfternoonEndAt")
                        .HasColumnType("float");

                    b.Property<double>("AfternoonStartAt")
                        .HasColumnType("float");

                    b.Property<double>("AfternoonWorking")
                        .HasColumnType("float");

                    b.Property<int>("AllowedLeaveDay")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("MorningEndAt")
                        .HasColumnType("float");

                    b.Property<double>("MorningStartAt")
                        .HasColumnType("float");

                    b.Property<double>("MorningWorking")
                        .HasColumnType("float");

                    b.Property<double>("Salary")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserLevelId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserLevelId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            AllowedLeaveDay = 4,
                            BranchId = 1,
                            EmailAddress = "user1@ncc.asia",
                            IsActive = false,
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Salary = 2000.0,
                            StartDate = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4478),
                            UserCode = "U01",
                            UserLevelId = 2,
                            UserName = "UserName01",
                            UserTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            AllowedLeaveDay = 4,
                            BranchId = 2,
                            EmailAddress = "admin1@ncc.asia",
                            IsActive = false,
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Salary = 6000.0,
                            StartDate = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4481),
                            UserCode = "U02",
                            UserLevelId = 16,
                            UserName = "UserName02",
                            UserTypeId = 3
                        },
                        new
                        {
                            Id = 3,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            AllowedLeaveDay = 4,
                            BranchId = 3,
                            EmailAddress = "staff1@ncc.asia",
                            IsActive = false,
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Salary = 4000.0,
                            StartDate = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4483),
                            UserCode = "U03",
                            UserLevelId = 8,
                            UserName = "UserName03",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            AllowedLeaveDay = 4,
                            BranchId = 2,
                            EmailAddress = "staff2@ncc.asia",
                            IsActive = false,
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Salary = 4000.0,
                            StartDate = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4485),
                            UserCode = "U04",
                            UserLevelId = 6,
                            UserName = "UserName04",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            AllowedLeaveDay = 4,
                            BranchId = 3,
                            EmailAddress = "staff3@ncc.asia",
                            IsActive = false,
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Salary = 4000.0,
                            StartDate = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4486),
                            UserCode = "U05",
                            UserLevelId = 7,
                            UserName = "UserName05",
                            UserTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            AfternoonEndAt = 17.300000000000001,
                            AfternoonStartAt = 13.0,
                            AfternoonWorking = 4.5,
                            AllowedLeaveDay = 4,
                            BranchId = 2,
                            EmailAddress = "staff4@ncc.asia",
                            IsActive = false,
                            MorningEndAt = 12.0,
                            MorningStartAt = 8.3000000000000007,
                            MorningWorking = 3.5,
                            Salary = 4000.0,
                            StartDate = new DateTime(2022, 10, 5, 14, 16, 45, 538, DateTimeKind.Local).AddTicks(4488),
                            UserCode = "U06",
                            UserLevelId = 9,
                            UserName = "UserName06",
                            UserTypeId = 1
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.UserLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Intern_0"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Intern_1"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Intern_2"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Intern_3"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Fresher_0"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Fresher_1"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Fresher_2"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Junior_0"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Junior_1"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Junior_2"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Middle_0"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Middle_1"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Middle_2"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Senior_0"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Senior_1"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Senior_2"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.UserStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Inactive"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Staff"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Internship"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Collaborator"
                        });
                });

            modelBuilder.Entity("TimeSheet.Model.Project", b =>
                {
                    b.HasOne("TimeSheet.Model.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.ProjectType", "ProjectType")
                        .WithMany()
                        .HasForeignKey("ProjectTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ProjectStatus");

                    b.Navigation("ProjectType");
                });

            modelBuilder.Entity("TimeSheet.Model.ProjectMember", b =>
                {
                    b.HasOne("TimeSheet.Model.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.UserStatus", "UserStatus")
                        .WithMany()
                        .HasForeignKey("UserStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("UserStatus");
                });

            modelBuilder.Entity("TimeSheet.Model.ProjectTask", b =>
                {
                    b.HasOne("TimeSheet.Model.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TimeSheet.Model.Tardiness", b =>
                {
                    b.HasOne("TimeSheet.Model.TardinessStatus", "TardinessStatus")
                        .WithMany()
                        .HasForeignKey("TardinessStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.User", "User")
                        .WithMany("Tardiness")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TardinessStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeSheet.Model.Task", b =>
                {
                    b.HasOne("TimeSheet.Model.TaskType", "TaskType")
                        .WithMany()
                        .HasForeignKey("TaskTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("TimeSheet.Model.TimeSheetLog", b =>
                {
                    b.HasOne("TimeSheet.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.TimeSheetLogType", "TimeSheetLogType")
                        .WithMany()
                        .HasForeignKey("TimeSheetLogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.User", "User")
                        .WithMany("TimeSheetLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Task");

                    b.Navigation("TimeSheetLogType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeSheet.Model.User", b =>
                {
                    b.HasOne("TimeSheet.Model.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.UserLevel", "UserLevel")
                        .WithMany()
                        .HasForeignKey("UserLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("UserLevel");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("TimeSheet.Model.UserRole", b =>
                {
                    b.HasOne("TimeSheet.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TimeSheet.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TimeSheet.Model.Branch", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("TimeSheet.Model.Client", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("TimeSheet.Model.Project", b =>
                {
                    b.Navigation("ProjectMembers");

                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("TimeSheet.Model.User", b =>
                {
                    b.Navigation("ProjectMembers");

                    b.Navigation("Tardiness");

                    b.Navigation("TimeSheetLogs");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
